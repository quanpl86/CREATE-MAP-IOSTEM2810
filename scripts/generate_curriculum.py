# scripts/generate_curriculum.py
import pandas as pd
import json
import os
import re
from collections import defaultdict

# --- C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ---
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
# Thay ƒë·ªïi t√™n file ngu·ªìn n·∫øu b·∫°n s·ª≠ d·ª•ng t√™n kh√°c, v√≠ d·ª•: 'master_curriculum_source.xlsx'
INPUT_FILE = os.path.join(PROJECT_ROOT, 'data', 'curriculum_source.xlsx')
OUTPUT_DIR = os.path.join(PROJECT_ROOT, 'data', 'curriculum')


# --- [N√ÇNG C·∫§P] H√†m parse_params ƒë∆∞·ª£c c·∫£i ti·∫øn ƒë·ªÉ x·ª≠ l√Ω JSON objects v√† arrays ---
def parse_params(param_string):
    """
    Chuy·ªÉn ƒë·ªïi chu·ªói 'key1:value1;key2:{"k":"v"};key3:[1,2]' th√†nh dictionary.
    H·ªó tr·ª£ c√°c gi√° tr·ªã d·∫°ng: chu·ªói, s·ªë nguy√™n, JSON object, v√† JSON array.
    """
    if not isinstance(param_string, str) or not param_string.strip():
        return {}
    params = {}
    # Ph√¢n t√°ch c√°c c·∫∑p key-value b·∫±ng d·∫•u ch·∫•m ph·∫©y
    for part in param_string.split(';'):
        if ':' in part:
            key, value = part.split(':', 1)
            key = key.strip()
            value = value.strip()
            
            # C·ªë g·∫Øng chuy·ªÉn ƒë·ªïi value th√†nh ki·ªÉu d·ªØ li·ªáu ph√π h·ª£p
            try:
                # 1. Ki·ªÉm tra xem value c√≥ ph·∫£i l√† m·ªôt JSON object ho·∫∑c array kh√¥ng
                if (value.startswith('{') and value.endswith('}')) or \
                   (value.startswith('[') and value.endswith(']')):
                    # Thay th·∫ø nh√°y ƒë∆°n b·∫±ng nh√°y k√©p ƒë·ªÉ ƒë·∫£m b·∫£o JSON h·ª£p l·ªá
                    valid_json_string = value.replace("'", '"')
                    params[key] = json.loads(valid_json_string)
                # 2. N·∫øu kh√¥ng, th·ª≠ chuy·ªÉn ƒë·ªïi th√†nh s·ªë nguy√™n
                else:
                    params[key] = int(value)
            except (ValueError, json.JSONDecodeError):
                # 3. N·∫øu t·∫•t c·∫£ th·∫•t b·∫°i, gi·ªØ nguy√™n gi√° tr·ªã l√† chu·ªói
                params[key] = value
    return params


def main():
    """ƒê·ªçc file Excel v√† sinh ra c√°c file curriculum JSON."""
    print("=============================================")
    print("=== B·∫ÆT ƒê·∫¶U QUY TR√åNH SINH CURRICULUM ===")
    print("=============================================")

    try:
        # S·ª≠ d·ª•ng .fillna('') ƒë·ªÉ x·ª≠ l√Ω c√°c √¥ tr·ªëng, tr√°nh l·ªói
        df = pd.read_excel(INPUT_FILE).fillna('')
        print(f"‚úÖ ƒê·ªçc th√†nh c√¥ng file ngu·ªìn: {INPUT_FILE}")
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file ngu·ªìn '{INPUT_FILE}'.")
        return
    except Exception as e:
        print(f"‚ùå L·ªói khi ƒë·ªçc file Excel: {e}")
        return

    # Nh√≥m c√°c th·ª≠ th√°ch theo topic_code
    challenges_by_topic = defaultdict(lambda: {'topic_name': '', 'suggested_maps': []})

    # L·∫∑p qua t·ª´ng d√≤ng trong file Excel ƒë·ªÉ t·∫°o c·∫•u tr√∫c map
    for index, row in df.iterrows():
        topic_code = row['topic_code']
        challenges_by_topic[topic_code]['topic_name'] = row['topic_name']

        # T·∫°o c·∫•u tr√∫c cho m·ªôt map_request
        map_request = {
            "id": row['id'],
            "level": int(row['level']),
            "titleKey": f"Challenge.{row['id']}.Title",
            "descriptionKey": f"Challenge.{row['id']}.Description",
            "translations": {}, # Kh·ªüi t·∫°o translations r·ªóng ƒë·ªÉ ƒëi·ªÅn sau
            "generation_config": {
                "map_type": row['gen_map_type'],
                "logic_type": row['gen_logic_type'],
                # [C·∫¢I TI·∫æN] Cung c·∫•p gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 1 n·∫øu √¥ tr·ªëng
                "num_variants": int(row.get('gen_num_variants')) if row.get('gen_num_variants') else 1,
                "params": parse_params(row.get('gen_params', '')) # S·ª≠ d·ª•ng h√†m parse_params ƒë√£ n√¢ng c·∫•p
            },
            "blockly_config": {
                "toolbox_preset": row['blockly_toolbox_preset'],
            },
            "solution_config": {
                # [C·∫¢I TI·∫æN] Cung c·∫•p gi√° tr·ªã m·∫∑c ƒë·ªãnh n·∫øu c·ªôt kh√¥ng t·ªìn t·∫°i
                "type": row.get('solution_type', 'reach_target'),
                "itemGoals": parse_params(row.get('solution_item_goals', ''))
            }
        }
        
        # --- [N√ÇNG C·∫§P] T·ª± ƒë·ªông ƒëi·ªÅn c√°c b·∫£n d·ªãch t·ª´ file Excel ---
        # ƒêi·ªÅn b·∫£n d·ªãch Ti·∫øng Vi·ªát
        if 'title_vi' in df.columns and row['title_vi']:
            map_request['translations']['vi'] = {
                f"Challenge.{row['id']}.Title": row['title_vi'],
                f"Challenge.{row['id']}.Description": row['description_vi']
            }
        
        # ƒêi·ªÅn b·∫£n d·ªãch Ti·∫øng Anh n·∫øu c√≥
        if 'title_en' in df.columns and row['title_en']:
            map_request['translations']['en'] = {
                f"Challenge.{row['id']}.Title": row['title_en'],
                f"Challenge.{row['id']}.Description": row['description_en']
            }

        # [C·∫¢I TI·∫æN] Ch·ªâ th√™m c√°c kh·ªëi blockly kh·ªüi ƒë·∫ßu n·∫øu ch√∫ng th·ª±c s·ª± ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a
        if row.get('blockly_start_block_type'):
             map_request["blockly_config"]["start_block_type"] = row.get('blockly_start_block_type')
        if row.get('blockly_start_blocks'):
             map_request["blockly_config"]["start_blocks"] = row.get('blockly_start_blocks')

        challenges_by_topic[topic_code]['suggested_maps'].append(map_request)

    # Ghi ra c√°c file JSON cho t·ª´ng topic
    if not os.path.exists(OUTPUT_DIR):
        os.makedirs(OUTPUT_DIR)
        print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c output: {OUTPUT_DIR}")

    for topic_code, data in challenges_by_topic.items():
        # [C·∫¢I TI·∫æN] S·∫Øp x·∫øp c√°c map theo level tr∆∞·ªõc khi ghi file
        data['suggested_maps'].sort(key=lambda x: x['level'])
        
        # [C·∫¢I TI·∫æN] T·∫°o t√™n file th√¢n thi·ªán v√† an to√†n h∆°n
        match = re.search(r'TOPIC_(\d+)', topic_code)
        if match:
            topic_num = match.group(1)
            # Chu·∫©n h√≥a topic_name ƒë·ªÉ l√†m t√™n file, lo·∫°i b·ªè k√Ω t·ª± kh√¥ng an to√†n
            safe_topic_name = data['topic_name'].lower()
            safe_topic_name = re.sub(r'[\s&]+', '_', safe_topic_name) # Thay kho·∫£ng tr·∫Øng, & b·∫±ng _
            safe_topic_name = re.sub(r'[^\w-]', '', safe_topic_name) # Lo·∫°i b·ªè c√°c k√Ω t·ª± kh√¥ng ph·∫£i ch·ªØ, s·ªë, _, -
            filename = f"{topic_num}_{safe_topic_name}.json"
        else:
            filename = f"{topic_code.lower()}.json"

        output_path = os.path.join(OUTPUT_DIR, filename)
        
        final_json = {
            "topic_code": topic_code,
            "topic_name": data['topic_name'],
            "suggested_maps": data['suggested_maps']
        }

        with open(output_path, 'w', encoding='utf-8') as f:
            # indent=2 ƒë·ªÉ file JSON d·ªÖ ƒë·ªçc, ensure_ascii=False ƒë·ªÉ hi·ªÉn th·ªã ti·∫øng Vi·ªát
            json.dump(final_json, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ ƒê√£ t·∫°o/c·∫≠p nh·∫≠t file curriculum: {filename}")

    print("\n=============================================")
    print("=== HO√ÄN TH√ÄNH SINH CURRICULUM ===")
    print("=============================================")


if __name__ == "__main__":
    main()